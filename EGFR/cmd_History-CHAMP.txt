## Pipeline for CHAMPS, done (so far) by Marco Mravic DeGrado lab
## Dependencies: Python 2.7, Biopython, ProDy, NumPy, Rosetta locally downloaded & compiled
# add the CHAMP/bin/ to your python path!! $PYTHONPATH

### THIS IS A CHAMP DESIGN CMD LINE HISTORY FOR EGFR/ErbB1, 


# Making working dir
> cd ~/CHAMP
> mkdir EGFR
> cd EGFR

# get sequence for TM region of TM target flanked by a few residues, <= 40 residues
# EGFR: PKIPSIATGMVGALLLLLVVALGIGLFMRRRH
# Uniprot suggested TM (Same as OPM)
# >sp|P00533|646-668 >IATGMVGALLLLLVVALGIGLFM

# Skip the structure prediction and threading steps, since EGFR structure exists pdd hetero dimer (pdb: 2ks1, chain B)
# mkae rosetta folder of membrane relax step

> mkdir ~/CHAMP/EGFR/RosMem_Target-input/

# just extract this file in pymol, and name it alignedInput.pdb... then renumber residues from 1 and set chain to A (Chimera)
# Hand write resfile from another, since this is probably quicker than scripting

> ~/CHAMP/bin/orientHelix_rosMemV2.py  ~/CHAMP/EGFR/RosMem_Target-input/alignedInput.pdb ~/rosetta/ ~/CHAMP/bin/helix_Relax.xml  ~/CHAMP/EGFR/RosMem_Target-input/resfile 

# Did this again with a 60 de gree-ish rotation of helix about it's own axis
> ~/CHAMP/bin/orientHelix_rosMemV2.py  ~/CHAMP/EGFR/RosMem_Target-input/alignedInput_V2.pdb ~/rosetta/ ~/CHAMP/bin/helix_Relax.xml  ~/CHAMP/EGFR/RosMem_Target-input/resfile 

## Now define dimerization motif and search par-right-close cluster

# full seq:  	PKIPSIATGMVGALLLLLVVALGIGLFMRRRH
# to match:		TGXXGA
# regex: 		[ASTG][ASTG]\w\w[ASG][ATSG]
# indices:		7 12

> python ~/CHAMP/bin/templatePairsScreen.py ~/CHAMP/Cluster-004/ ~/CHAMP/EGFR/bbHits_Nterm-TGXXGA/ ~/CHAMP/EGFR/RosMem_Target-input/alignedInput_0001.pdb ~/CHAMP/Cluster-004_ext/ PKIPSIATGMVGALLLLLVVALGIGLFMRRRH 7 12 "[ASTG][ASTG]\w\w[ASG][ATSG]"

> python ~/CHAMP/bin/templatePairsScreen.py ~/CHAMP/Cluster-004/ ~/CHAMP/EGFR/bbHits_NtermV2-TGXXGA/ ~/CHAMP/EGFR/RosMem_Target-input/alignedInput_V2_0001.pdb ~/CHAMP/Cluster-004_ext/ PKIPSIATGMVGALLLLLVVALGIGLFMRRRH 7 12 "[ASTG][ASTG]\w\w[ASG][ATSG]"

## Visualize CHAMP hit with membrane
> cp ~/CHAMP/EGFR/RosMem_Target-input/alignedInput_V2_0001.pdb ~/CHAMP/EGFR/bbHits_NtermV2-TGXXGA/
> cd ~/CHAMP/EGFR/bbHits_NtermV2-TGXXGA/
> python ~/CHAMP/bin/addMem2Pdb_fromMemRes.py alignedInput_V2_0001.pdb > alignedInput_V2_0001_MEM.pdb 
## Open all models up together... and with original template

# Hits at V2_ match1*NEW*, match9 *HER2-like*
> cd ../
> mkdir bb2Design
#
> cp ~/CHAMP/EGFR/bbHits_NtermV2-TGXXGA/match_1.pdb bb2Design
> cp ~/CHAMP/EGFR/bbHits_NtermV2-TGXXGA/match_9.pdb bb2Design

# ran 3200 trajectories (2 days) with score and packing filters
> python ~/CHAMP/bin/champDesign_rosMem.py ~/CHAMP/EGFR/bb2Design/match_1/match_1.pdb ~/CHAMP/bin/helix_Design.xml ~/rosetta/
> python ~/CHAMP/bin/champDesign_rosMem.py ~/CHAMP/EGFR/bb2Design/match_9/match_9.pdb ~/CHAMP/bin/helix_Design.xml ~/rosetta/

# Analyze designs, print to fasta for seq clustering

> python ~/CHAMP/bin/analyzeChampDesigns.py ~/CHAMP/EGFR/bb2Design/match_9/outputs anti-EGFR_backbone_9_designs > ~/CHAMP/EGFR/bb2Design/match_9/designs.fasta

> python ~/CHAMP/bin/analyzeChampDesigns.py ~/CHAMP/EGFR/bb2Design/match_1/outputs anti-EGFR_backbone_1_designs > ~/CHAMP/EGFR/bb2Design/match_1/m1_designs.fasta

