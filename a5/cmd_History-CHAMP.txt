## Pipeline for CHAMPS, done (so far) by Marco Mravic DeGrado lab
## Dependencies: Python 2.7, Biopython, ProDy, NumPy, Rosetta locally downloaded & compiled
# add the CHAMP/bin/ to your python path!! $PYTHONPATH


# Making base CAHMP dir and the working dir for CHAMP target of choice, e.g. a5 dir
> mkdir ~/CHAMP
> cd ~/CHAMP
> mkdir a5
> cd a5


######## Input file Prep #########

# get sequence for TM region of TM target flanked by a few residues, <= 40 residues
# > a-5 integrin EGSYGVPLWIIILAILFGLLLLGLLIYILYKLGFFKR
# uniprot TM region: GVPLWIIILAILFGLLLLGLLIYILY
# 


# Must also have a 40-residue single 'ideal' alpha helix PDB to thread this sequence on


## make a prelim pdb file of this target sequence, threading to ideal Alpha Helix

> python ~/CHAMP/bin/thread_repack.py EGSYGVPLWIIILAILFGLLLLGLLIYILYKLGFFKR ~/bin/40_allAlaIdealHelix.pdb ~/CHAMP/a5/thread/ ~/rosetta/

##

# Use this to orient in the membrane in a few steps below...

> mkdir ~/CHAMP/a5/RosMem_Target-input/
#

## get initial positioning in membrane of PDB file. Using OPM output of integrin aIIb-b1 complex (pdb)

> python ~/CHAMP/bin/alignTMs.py ~/CHAMP/Misc/2knc.pdb ~/CHAMP/a5/thread/threadedHelix_0001.pdb ~/CHAMP/a5/RosMem_Target-input/
##


## refine this positioning using Rosetta Membrane, after auto creating span file
> python ~/CHAMP/bin/orientHelix_rosMemV2.py ~/CHAMP/a5/RosMem_Target-input/alignedInput.pdb  ~/rosetta/ ~/CHAMP/bin/helix_Relax.xml ~/CHAMP/a5/thread/resfile 

##

######## END Input file Prep #####



######## Finding Helical pairs in a geometric cluster 

> cd ~/CHAMP/a5/RosMem_Target-input/

> python ~/CHAMP/bin/templatePairsScreen.py ~/CHAMP/Cluster-004/ ~/CHAMP/a5/bbHits/ ~/CHAMP/a5/RosMem_Target-input/alignedInput_0001.pdb ~/CHAMP/Cluster-004_ext/ EGSYGVPLWIIILAILFGLLLLGLLIYILYKLGFFKR 13 20 "[ASTG]\w\w[FMYWLIKR][ASG]\w\w[ILVFNQDEH]"

## Visually pcik Best matches  ... mo 
# 1**, 3, 4** 6, 10, 15, 19, 20

> mkdir bb2Design

### Prepare these pdb files in bb2Design for rosettaMembrane design

> python ~/CHAMP/bin/designPrep.py ~/CHAMP/a5/bb2Design/ ~/rosetta/

## Try some local Design

> cd match_1/

# 800 designs per run, 1 run per minute... ( over night, 12 hours or so)
> python ~/CHAMP/bin/champDesign_rosMem.py ~/CHAMP/a5/bb2Design/match_1/match_1.pdb ~/CHAMP/bin/helix_Design.xml ~/rosetta/
> python ~/CHAMP/bin/champDesign_rosMem.py ~/CHAMP/a5/bb2Design/match_4/match_4.pdb ~/CHAMP/bin/helix_Design.xml ~/rosetta/
> python ~/CHAMP/bin/champDesign_rosMem.py ~/CHAMP/a5/bb2Design/match_20/match_20.pdb ~/CHAMP/bin/helix_Design.xml ~/rosetta/

## Plot and analyze these jobs. This script is not final, but used to plot and move thing as user dictates... so this is separate from pipeline
python ~/CHAMP/bin/analyzeChampDesigns.py ~/CHAMP/a5/bb2Design/match_4/outputs/ > a5_match_4.fasta

# re-write pDB to build DUM hetatoms at the rosetta calculated membrane
> python ~/CHAMP/bin/addMem2Pdb_fromMemRes.py match_1_0505.pdb > match_1_0505_MEM.pdb


.
.
.
.
.

### Way later, after experimental results were found, calculate the delta G of association, by subtracting the final score minus the score of two helices alone

> python ~/CHAMP/bin/separate_Champ_Energy.py ~/CHAMP/a5/bb2Design/match_1/outputs/  ~/CHAMP/a5/m1_association/m1_separate.pdb  ~/rosetta/ ~/CHAMP/bin/helix_Relax-2Body.xml 

xray@dgl-xray:~/CHAMP/a5/m1_association$ python ~/CHAMP/bin/association_analysis.py  ~/CHAMP/a5/m1_association/ > ../a_scores.txt
