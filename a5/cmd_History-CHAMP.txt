## Pipeline for CHAMPS, done (so far) by Marco Mravic DeGrado lab
## Dependencies: Python 2.7, Biopython, ProDy, NumPy, Rosetta locally downloaded & compiled
# add the CHAMP/bin/ to your python path!! $PYTHONPATH


# Making base CAHMP dir and the working dir for CHAMP target of choice, e.g. a5 dir
> mkdir ~/CHAMP
> cd ~/CHAMP
> mkdir a5
> cd a5


######## Input file Prep #########

# get sequence for TM region of TM target flanked by a few residues, <= 40 residues
# > a-5 integrin EGSYGVPLWIIILAILFGLLLLGLLIYILYKLGFFKR
# uniprot TM region: GVPLWIIILAILFGLLLLGLLIYILY
# 


# Must also have a 40-residue single 'ideal' alpha helix PDB to thread this sequence on


## make a prelim pdb file of this target sequence, threading to ideal Alpha Helix

> python ~/CHAMP/bin/thread_repack.py EGSYGVPLWIIILAILFGLLLLGLLIYILYKLGFFKR ~/bin/40_allAlaIdealHelix.pdb ~/CHAMP/a5/thread/ ~/rosetta/

##

# Use this to orient in the membrane in a few steps below...

> mkdir ~/CHAMP/a5/RosMem_Target-input/
#

## get initial positioning in membrane of PDB file. Using OPM output of integrin aIIb-b1 complex (pdb)

> python ~/CHAMP/bin/alignTMs.py ~/CHAMP/Misc/2knc.pdb ~/CHAMP/a5/thread/threadedHelix_0001.pdb ~/CHAMP/a5/RosMem_Target-input/
##


## refine this positioning using Rosetta Membrane, after auto creating span file
> python ~/CHAMP/bin/orientHelix_rosMemV2.py ~/CHAMP/a5/RosMem_Target-input/alignedInput.pdb  ~/rosetta/ ~/CHAMP/bin/helix_Relax.xml ~/CHAMP/a5/thread/resfile 

##

######## END Input file Prep #####



######## Finding Helical pairs in a geometric cluster 

> cd ~/CHAMP/a5/RosMem_Target-input/

> python ~/CHAMP/bin/templatePairsScreen.py ~/CHAMP/Cluster-004/ ~/CHAMP/a5/bbHits/ ~/CHAMP/a5/RosMem_Target-input/alignedInput_0001.pdb ~/CHAMP/Cluster-004_ext/ EGSYGVPLWIIILAILFGLLLLGLLIYILYKLGFFKR 13 20 "[ASTG]\w\w[FMYWLIKR][ASG]\w\w[ILVFNQDEH]"

## Visually pcik Best matches  ... mo 
# 1**, 3, 4** 6, 10, 15, 19, 20

> mkdir bb2Design

### Prepare these pdb files in bb2Design for rosettaMembrane design

> python ~/CHAMP/bin/designPrep.py ~/CHAMP/a5/bb2Design/ ~/rosetta/

## Try some local Design

> cd match_1/

# 800 designs per run, 1 run per minute... ( over night, 12 hours or so)
> python ~/CHAMP/bin/champDesign_rosMem.py ~/CHAMP/a5/bb2Design/match_1/match_1.pdb ~/CHAMP/bin/helix_Design.xml ~/rosetta/
> python ~/CHAMP/bin/champDesign_rosMem.py ~/CHAMP/a5/bb2Design/match_4/match_4.pdb ~/CHAMP/bin/helix_Design.xml ~/rosetta/
> python ~/CHAMP/bin/champDesign_rosMem.py ~/CHAMP/a5/bb2Design/match_20/match_20.pdb ~/CHAMP/bin/helix_Design.xml ~/rosetta/


.
.
.

## reading all the sequences & scores from a directory of design runs. & Cluster unique sequences 
#  Clustering:hierarchical at the level of the average pairwise distance (corresponding BLOSOM) 
#  Also suggest top sequence from each cluster to look for in design
### Warning, this version of this code is hardcoded & requires commenting in/out 
#	a few lines depending on the non-interfacial positions from sequence

> python ~/CHAMP/bin/analyzeChampDesigns-a5.py ~/CHAMP/a5/bb2Design/match_4/outputs/ ~/CHAMP/a5/bb2Design/match_4/outputs/dmatrix.pkl 'CHAMP anti-a5 Backbone 4' > ~/CHAMP/a5/bb2Design/match_4/a5_m4_fasta_summary.txt


> python ~/CHAMP/bin/analyzeChampDesigns-a5.py ~/CHAMP/a5/bb2Design/match_1/outputs/ ~/CHAMP/a5/bb2Design/match_1/outputs/dmatrix.pkl 'CHAMP anti-a5 Backbone 1' > ~/CHAMP/a5/bb2Design/match_1/a5_m1_fasta_summary.txt

## Took all of m1 unique designs to simulation & association energy stages
## For m4, took 1-2 highest scoring (packstat) from each cluster
# criteria: top in cluster if >0.5 ps, & next best in cluster is > 0.52 and not too close in seq to original. Wary of TMTrp
## m4 has list at the end of it's '**fasta_summary.txt' file. This was used to make this input path list



## selectively calculate energy of association
# (rosetta local) HAND MAKE: 
# INPUT 1) a txt file, list of pathes to design .pdb files to perform this calculation on (model_listS.txt )

> mkdir m1_association

> python ~/CHAMP/bin/separate_Champ_Energy.py ~/CHAMP/a5/bb2Design/match_1/outputs/  ~/CHAMP/a5/m1_association/m1_separate.pdb  ~/rosetta/ ~/CHAMP/bin/helix_Relax-2Body.xml 

> mkdir m4_association

> python ~/CHAMP/bin/separate_Champ_Energy-a5m4.py ~/CHAMP/a5/bb2Design/match_4/model_listS.txt  ~/CHAMP/a5/m4_association/m4_separate.pdb  ~/rosetta/ ~/CHAMP/bin/helix_Relax-2Body.xml

# calcualte the 'delta' Gibbs free E of association, but tkaing lowest R.E.U from separated and dimer states. 

>  python ~/CHAMP/bin/association_analysis.py  ~/CHAMP/a5/m1_association/ > ../a_scores.txt

> python ~/CHAMP/bin/association_analysis.py  ~/CHAMP/a5/m4_association/ >> ../a_scores.txt

###### in-vacumm MD simulation

# First find best, re-packed trial for each model to use as input for MD... write to path list

> python ~/CHAMP/bin/listBestModels.py ~/CHAMP/a5/m1_association/ ~/CHAMP/a5/model_list.txt

> python ~/CHAMP/bin/listBestModels.py ~/CHAMP/a5/m4_association/ ~/CHAMP/a5/model_list.txt

# Then Prepare pdb files for input into both/either in vaccum MD or Implicit Membrane MD (psfgen & orient in membrane)

> python ~/CHAMP/bin/prepNvacMD.py ~/CHAMP/a5/m4_model_list.txt ~/CHAMP/a5/MD_runs/ ~/CHAMP/bin/vacMD.conf ~/CHAMP/bin/champ_MDprep.tcl ~/CHAMP/bin/Z_align.pdb ~/bin/NAMD/namd2 /Applications/VMD1.9.2.app/Contents/MacOS/startup.command ~/CHAMP/bin/vacEQ.conf 

# re-write pDB to build DUM hetatoms at the rosetta calculated membrane
> python ~/CHAMP/bin/addMem2Pdb_fromMemRes.py match_1_0505.pdb > match_1_0505_MEM.pdb




